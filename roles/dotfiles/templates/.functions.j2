#!/usr/bin/env bash

#
# {{ ansible_managed }}
#

# Webserver
function server() {
    local port="${1:-8000}";
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# Simple random string - Use for Magento admin path
function random-string() {
    head /dev/urandom | tr -dc 'A-Za-z0-9' | head -c 10
}

# Add Space to dock
function dock-space() {
    defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'
    killall Dock
}

# Remove bastard .DS_Store files recursively from the current directory
function rm-dsstore() {
    find . -name ".DS_Store" -depth -exec rm -vf {} \;
}

# List fucking .DS_Store files recursively from the current directory
function ls-dsstore() {
    find . -name ".DS_Store" -depth
}

# Display broken symlinks
function symlinks-broken() {
    find . -type l -exec test ! -e {} \; -print
}

# Remove broken symlinks
function symlinks-broken-rm() {
    find . -type l -exec test ! -e {} \; -delete
}

# Enable Xdebug extension for php-cli scripts
function xdebug-listen() {
    export XDEBUG_SESSION=1
}

# Disable Xdebug extension for php-cli scripts
function xdebug-stoplistening() {
    unset XDEBUG_SESSION
}
